#pragma once

#include <functional>

namespace libhoard::detail {


template<typename T, typename Allocator, typename ErrorType>
template<typename Table, typename... Args, std::size_t... Indices>
inline mapped_value<T, Allocator, ErrorType>::mapped_value([[maybe_unused]] const Table& table, [[maybe_unused]] std::piecewise_construct_t pc, std::tuple<Args...> args, [[maybe_unused]] std::index_sequence<Indices...> indices) noexcept(std::is_nothrow_constructible_v<T, Args...>)
: value_(std::in_place_index<1>, std::get<Indices>(std::move(args))...)
{}

template<typename T, typename Allocator, typename ErrorType>
template<typename Table>
inline mapped_value<T, Allocator, ErrorType>::mapped_value([[maybe_unused]] const Table& table, allocator_type allocator)
: value_(std::in_place_type<pending_type>, std::move(allocator))
{}

template<typename T, typename Allocator, typename ErrorType>
template<typename Table>
inline mapped_value<T, Allocator, ErrorType>::mapped_value([[maybe_unused]] const Table& table, [[maybe_unused]] std::piecewise_construct_t pc, error_type ex) noexcept(std::is_nothrow_move_constructible_v<ErrorType>)
: value_(std::in_place_index<3>, std::move(ex))
{}

template<typename T, typename Allocator, typename ErrorType>
template<typename Table, typename... Args>
inline mapped_value<T, Allocator, ErrorType>::mapped_value(const Table& table, std::piecewise_construct_t pc, std::tuple<Args...> args) noexcept(std::is_nothrow_constructible_v<T, Args...>)
: mapped_value(table, pc, std::move(args), std::index_sequence_for<Args...>())
{}

template<typename T, typename Allocator, typename ErrorType>
template<typename... Args>
inline auto mapped_value<T, Allocator, ErrorType>::assign(Args&&... args) noexcept(std::is_nothrow_constructible_v<mapped_type, Args...>) -> void {
  pending_type p = std::move(std::get<pending_type>(value_));
  p.resolve_success(value_.template emplace<1>(std::forward<Args>(args)...));
  if (p.expired() || p.weakened()) value_.template emplace<expired_t>();
}

template<typename T, typename Allocator, typename ErrorType>
inline auto mapped_value<T, Allocator, ErrorType>::assign_error(error_type ex) noexcept -> void {
  pending_type& p = std::get<pending_type>(value_);
  p.resolve_failure(ex);
  if (p.expired() || p.weakened())
    value_.template emplace<expired_t>();
  else
    value_.template emplace<3>(std::move(ex));
}

template<typename T, typename Allocator, typename ErrorType>
inline auto mapped_value<T, Allocator, ErrorType>::weaken() noexcept -> void {
  switch (value_.index()) {
    default:
      value_.template emplace<expired_t>();
      break;
    case 0:
      std::get<pending_type>(value_).weaken();
      break;
    case 2:
      break; // SKIP
  }
}

template<typename T, typename Allocator, typename ErrorType>
inline auto mapped_value<T, Allocator, ErrorType>::strengthen() noexcept -> bool {
  switch (value_.index()) {
    default:
      return true;
    case 0:
      return std::get<pending_type>(value_).strengthen();
    case 2:
      return false;
  }
}

template<typename T, typename Allocator, typename ErrorType>
inline auto mapped_value<T, Allocator, ErrorType>::expired() const noexcept -> bool {
  switch (value_.index()) {
    default:
      return false;
    case 0:
      return std::get<0>(value_).expired();
    case 2:
      return true;
  }
}

template<typename T, typename Allocator, typename ErrorType>
inline auto mapped_value<T, Allocator, ErrorType>::pending() const noexcept -> bool {
  return value_.index() == 0;
}

template<typename T, typename Allocator, typename ErrorType>
inline auto mapped_value<T, Allocator, ErrorType>::cancel() noexcept -> void {
  if (auto pending_ptr = std::get_if<0>(&value_))
    pending_ptr->cancel();
}

template<typename T, typename Allocator, typename ErrorType>
inline auto mapped_value<T, Allocator, ErrorType>::mark_expired() noexcept -> void {
  switch (value_.index()) {
    default:
      value_.template emplace<expired_t>();
      break;
    case 0:
      std::get<0>(value_).mark_expired();
      break;
  }
}

template<typename T, typename Allocator, typename ErrorType>
inline auto mapped_value<T, Allocator, ErrorType>::holds_error() const noexcept -> bool {
  return value_.index() == 3;
}

template<typename T, typename Allocator, typename ErrorType>
inline auto mapped_value<T, Allocator, ErrorType>::holds_value() const noexcept -> bool {
  return value_.index() == 1;
}

template<typename T, typename Allocator, typename ErrorType>
inline auto mapped_value<T, Allocator, ErrorType>::get_if_matching(function_ref<bool(const mapped_type&)> matcher) const -> std::variant<std::monostate, mapped_type, error_type> {
  using variant_type = std::variant<std::monostate, mapped_type, error_type>;

  switch (value_.index()) {
    default:
      return variant_type(std::in_place_index<0>);
    case 1:
      if (std::invoke(matcher, std::get<1>(value_)))
        return variant_type(std::in_place_index<1>, std::get<1>(value_));
      return variant_type(std::in_place_index<0>);
  }
}

template<typename T, typename Allocator, typename ErrorType>
inline auto mapped_value<T, Allocator, ErrorType>::get([[maybe_unused]] std::true_type include_pending) noexcept(std::is_nothrow_copy_constructible_v<mapped_type>) -> std::variant<std::monostate, mapped_type, error_type, pending_type*> {
  using variant_type = std::variant<std::monostate, mapped_type, error_type, pending_type*>;

  switch (value_.index()) {
    default:
      return variant_type(std::in_place_index<0>);
    case 0:
      return variant_type(std::in_place_index<3>, &std::get<0>(value_));
    case 1:
      return variant_type(std::in_place_index<1>, std::get<1>(value_));
    case 3:
      return variant_type(std::in_place_index<2>, std::get<3>(value_));
  }
}

template<typename T, typename Allocator, typename ErrorType>
inline auto mapped_value<T, Allocator, ErrorType>::get([[maybe_unused]] std::false_type include_pending) const noexcept(std::is_nothrow_copy_constructible_v<mapped_type>) -> std::variant<std::monostate, mapped_type, error_type> {
  using variant_type = std::variant<std::monostate, mapped_type, error_type>;

  switch (value_.index()) {
    default:
      return variant_type(std::in_place_index<0>);
    case 1:
      return variant_type(std::in_place_index<1>, std::get<1>(value_));
    case 3:
      return variant_type(std::in_place_index<2>, std::get<3>(value_));
  }
}

template<typename T, typename Allocator, typename ErrorType>
inline auto mapped_value<T, Allocator, ErrorType>::get_pending() noexcept -> pending_type* {
  switch (value_.index()) {
    default:
      return nullptr;
    case 0:
      return &std::get<0>(value_);
  }
}

template<typename T, typename Allocator, typename ErrorType>
inline auto mapped_value<T, Allocator, ErrorType>::matches(function_ref<bool(const mapped_type&)> matcher) const -> bool {
  auto v_ptr = std::get_if<1>(&value_);
  return v_ptr != nullptr && std::invoke(matcher, *v_ptr);
}


template<typename Pointer, typename Allocator, typename ErrorType, typename WeakPointer, typename MemberPointer, typename MPCA>
template<typename Table, typename... Args, std::size_t... Indices>
inline mapped_pointer<Pointer, Allocator, ErrorType, WeakPointer, MemberPointer, MPCA>::mapped_pointer(const Table& table, [[maybe_unused]] mpca_tag pc, std::tuple<Args...> args, [[maybe_unused]] std::index_sequence<Indices...> indices) noexcept(std::is_nothrow_constructible_v<MemberPointer, Args...>)
: mpca_(table),
  value_(std::in_place_index<1>, std::get<Indices>(std::move(args))...)
{}

template<typename Pointer, typename Allocator, typename ErrorType, typename WeakPointer, typename MemberPointer, typename MPCA>
template<typename Table, typename... Args>
inline mapped_pointer<Pointer, Allocator, ErrorType, WeakPointer, MemberPointer, MPCA>::mapped_pointer(const Table& table, mpca_tag pc, std::tuple<Args...> args) noexcept(std::is_nothrow_constructible_v<MemberPointer, Args...>)
: mapped_pointer(table, pc, std::move(args), std::index_sequence_for<Args...>())
{}

template<typename Pointer, typename Allocator, typename ErrorType, typename WeakPointer, typename MemberPointer, typename MPCA>
template<typename Table>
inline mapped_pointer<Pointer, Allocator, ErrorType, WeakPointer, MemberPointer, MPCA>::mapped_pointer(const Table& table, allocator_type allocator)
: mpca_(table),
  value_(std::in_place_type<pending_type>, std::move(allocator))
{}

template<typename Pointer, typename Allocator, typename ErrorType, typename WeakPointer, typename MemberPointer, typename MPCA>
template<typename Table>
inline mapped_pointer<Pointer, Allocator, ErrorType, WeakPointer, MemberPointer, MPCA>::mapped_pointer(const Table& table, [[maybe_unused]] std::piecewise_construct_t pc, error_type ex) noexcept(std::is_nothrow_move_constructible_v<ErrorType>)
: mpca_(table),
  value_(std::in_place_index<3>, std::move(ex))
{}

template<typename Pointer, typename Allocator, typename ErrorType, typename WeakPointer, typename MemberPointer, typename MPCA>
template<typename Table, typename... Args>
inline mapped_pointer<Pointer, Allocator, ErrorType, WeakPointer, MemberPointer, MPCA>::mapped_pointer(const Table& table, [[maybe_unused]] std::piecewise_construct_t pc, std::tuple<Args...> args) noexcept(std::is_nothrow_constructible_v<MemberPointer, Args...>)
: mapped_pointer(
    table, mpca_tag(),
    std::apply(
        [&table](auto&&... args) {
          return MPCA::mpca_args_static_(table, std::forward<decltype(args)>(args)...);
        },
        std::move(args)))
{}

template<typename Pointer, typename Allocator, typename ErrorType, typename WeakPointer, typename MemberPointer, typename MPCA>
template<typename... Args>
inline auto mapped_pointer<Pointer, Allocator, ErrorType, WeakPointer, MemberPointer, MPCA>::assign(Args&&... args) noexcept(std::is_nothrow_constructible_v<MemberPointer, Args...> && std::is_nothrow_constructible_v<Pointer, MemberPointer> && std::is_nothrow_constructible_v<WeakPointer, Pointer>) -> void {
  pending_type p = std::move(std::get<pending_type>(value_));
  p.resolve_success(
      std::apply(
          [this](auto&&... args) -> Pointer {
            return this->value_.template emplace<1>(std::forward<decltype(args)>(args)...);
          },
          mpca_.strengthen_args_(std::forward<Args>(args)...)));

  if (p.expired()) {
    if constexpr(std::is_nothrow_default_constructible_v<WeakPointer>)
      value_.template emplace<2>();
    else
      value_.template emplace<expired_t>();
  } else if (p.weakened()) {
    // We must create an intermediary pointer,
    // otherwise we would have an dangling reference
    // to the strong pointer during the variant.emplace operation.
    Pointer ptr = std::get<1>(value_);
    value_.template emplace<2>(std::move(ptr));
  }
}

template<typename Pointer, typename Allocator, typename ErrorType, typename WeakPointer, typename MemberPointer, typename MPCA>
inline auto mapped_pointer<Pointer, Allocator, ErrorType, WeakPointer, MemberPointer, MPCA>::assign_error(error_type ex) noexcept -> void {
  pending_type& p = std::get<pending_type>(value_);
  p.resolve_failure(ex);
  if (p.expired()) {
    if constexpr(std::is_nothrow_default_constructible_v<WeakPointer>)
      value_.template emplace<2>();
    else
      value_.template emplace<expired_t>();
  } else if (p.weakened()) {
    if constexpr(std::is_nothrow_default_constructible_v<WeakPointer>)
      value_.template emplace<2>();
    else
      value_.template emplace<expired_t>();
  } else {
    value_.template emplace<3>(std::move(ex));
  }
}

template<typename Pointer, typename Allocator, typename ErrorType, typename WeakPointer, typename MemberPointer, typename MPCA>
inline auto mapped_pointer<Pointer, Allocator, ErrorType, WeakPointer, MemberPointer, MPCA>::weaken() noexcept -> void {
  switch (value_.index()) {
    default:
      if constexpr(std::is_nothrow_default_constructible_v<WeakPointer>)
        value_.template emplace<2>();
      else
        value_.template emplace<expired_t>();
      break;
    case 0:
      std::get<pending_type>(value_).weaken();
      break;
    case 1:
      // We must create an intermediary pointer,
      // otherwise we would have an dangling reference
      // to the strong pointer during the variant.emplace operation.
      {
        Pointer ptr = std::get<1>(value_);
        value_.template emplace<2>(std::move(ptr));
      }
      break;
    case 2:
      break; // SKIP (because already weakened)
    case 4: [[fallthrough]];
    case std::variant_npos:
      break; // SKIP (because already expired)
  }
}

template<typename Pointer, typename Allocator, typename ErrorType, typename WeakPointer, typename MemberPointer, typename MPCA>
inline auto mapped_pointer<Pointer, Allocator, ErrorType, WeakPointer, MemberPointer, MPCA>::strengthen() -> bool {
  switch (value_.index()) {
    case 0:
      return std::get<pending_type>(value_).strengthen();
    case 1:
      return true;
    case 2:
      if (Pointer ptr = std::get<2>(value_).lock()) {
        std::apply(
            [this](auto&&... args) {
              value_.template emplace<1>(std::forward<decltype(args)>(args)...);
            },
            mpca_.strengthen_args_(std::move(ptr)));
        return true;
      }
      return false;
    case 3:
      return true;
    case 4: [[fallthrough]];
    case std::variant_npos: [[fallthrough]];
    default:
      return false;
  }
}

template<typename Pointer, typename Allocator, typename ErrorType, typename WeakPointer, typename MemberPointer, typename MPCA>
inline auto mapped_pointer<Pointer, Allocator, ErrorType, WeakPointer, MemberPointer, MPCA>::expired() const noexcept -> bool {
  switch (value_.index()) {
    default:
      return false;
    case 0:
      return std::get<0>(value_).expired();
    case 2:
      return std::get<2>(value_).expired();
    case 4: [[fallthrough]];
    case std::variant_npos:
      return true;
  }
}

template<typename Pointer, typename Allocator, typename ErrorType, typename WeakPointer, typename MemberPointer, typename MPCA>
inline auto mapped_pointer<Pointer, Allocator, ErrorType, WeakPointer, MemberPointer, MPCA>::pending() const noexcept -> bool {
  return value_.index() == 0;
}

template<typename Pointer, typename Allocator, typename ErrorType, typename WeakPointer, typename MemberPointer, typename MPCA>
inline auto mapped_pointer<Pointer, Allocator, ErrorType, WeakPointer, MemberPointer, MPCA>::cancel() noexcept -> void {
  if (auto pending_ptr = std::get_if<0>(&value_))
    pending_ptr->cancel();
}

template<typename Pointer, typename Allocator, typename ErrorType, typename WeakPointer, typename MemberPointer, typename MPCA>
inline auto mapped_pointer<Pointer, Allocator, ErrorType, WeakPointer, MemberPointer, MPCA>::mark_expired() noexcept -> void {
  if (auto pending_ptr = std::get_if<0>(&value_)) {
    pending_ptr->mark_expired();
  } else {
    if constexpr(std::is_nothrow_default_constructible_v<WeakPointer>)
      value_.template emplace<2>();
    else
      value_.template emplace<expired_t>();
  }
}

template<typename Pointer, typename Allocator, typename ErrorType, typename WeakPointer, typename MemberPointer, typename MPCA>
inline auto mapped_pointer<Pointer, Allocator, ErrorType, WeakPointer, MemberPointer, MPCA>::holds_error() const noexcept -> bool {
  return value_.index() == 3;
}

template<typename Pointer, typename Allocator, typename ErrorType, typename WeakPointer, typename MemberPointer, typename MPCA>
inline auto mapped_pointer<Pointer, Allocator, ErrorType, WeakPointer, MemberPointer, MPCA>::holds_value() const noexcept -> bool {
  switch (value_.index()) {
    default:
      return false;
    case 1:
      return true;
    case 2:
      return bool(std::get<2>(value_).lock());
  }
}

template<typename Pointer, typename Allocator, typename ErrorType, typename WeakPointer, typename MemberPointer, typename MPCA>
inline auto mapped_pointer<Pointer, Allocator, ErrorType, WeakPointer, MemberPointer, MPCA>::get_if_matching(function_ref<bool(const mapped_type&)> matcher) const -> std::variant<std::monostate, mapped_type, error_type> {
  using variant_type = std::variant<std::monostate, mapped_type, error_type>;

  switch (value_.index()) {
    default:
      return variant_type(std::in_place_index<0>);
    case 1:
      if (std::invoke(matcher, std::get<1>(value_)))
        return variant_type(std::in_place_index<1>, std::get<1>(value_));
      return variant_type(std::in_place_index<0>);
    case 2:
      if (Pointer ptr = std::get<2>(value_).lock()) {
        if (std::invoke(matcher, ptr))
          return variant_type(std::in_place_index<1>, std::move(ptr));
      }
      return variant_type(std::in_place_index<0>);
  }
}

template<typename Pointer, typename Allocator, typename ErrorType, typename WeakPointer, typename MemberPointer, typename MPCA>
inline auto mapped_pointer<Pointer, Allocator, ErrorType, WeakPointer, MemberPointer, MPCA>::get([[maybe_unused]] std::true_type include_pending) noexcept(std::is_nothrow_copy_constructible_v<mapped_type> && noexcept(std::declval<const WeakPointer&>().lock())) -> std::variant<std::monostate, mapped_type, error_type, pending_type*> {
  using variant_type = std::variant<std::monostate, mapped_type, error_type, pending_type*>;

  switch (value_.index()) {
    default:
      return variant_type(std::in_place_index<0>);
    case 0:
      return variant_type(std::in_place_index<3>, &std::get<0>(value_));
    case 1:
      return variant_type(std::in_place_index<1>, std::get<1>(value_));
    case 2:
      if (Pointer ptr = std::get<2>(value_).lock())
        return variant_type(std::in_place_index<1>, std::move(ptr));
      return variant_type(std::in_place_index<0>);
    case 3:
      return variant_type(std::in_place_index<2>, std::get<3>(value_));
  }
}

template<typename Pointer, typename Allocator, typename ErrorType, typename WeakPointer, typename MemberPointer, typename MPCA>
inline auto mapped_pointer<Pointer, Allocator, ErrorType, WeakPointer, MemberPointer, MPCA>::get([[maybe_unused]] std::false_type include_pending) const noexcept(std::is_nothrow_copy_constructible_v<mapped_type> && noexcept(std::declval<const WeakPointer&>().lock())) -> std::variant<std::monostate, mapped_type, error_type> {
  using variant_type = std::variant<std::monostate, mapped_type, error_type>;

  switch (value_.index()) {
    default:
      return variant_type(std::in_place_index<0>);
    case 1:
      return variant_type(std::in_place_index<1>, std::get<1>(value_));
    case 2:
      if (Pointer ptr = std::get<2>(value_).lock())
        return variant_type(std::in_place_index<1>, std::move(ptr));
      return variant_type(std::in_place_index<0>);
    case 3:
      return variant_type(std::in_place_index<2>, std::get<3>(value_));
  }
}

template<typename Pointer, typename Allocator, typename ErrorType, typename WeakPointer, typename MemberPointer, typename MPCA>
inline auto mapped_pointer<Pointer, Allocator, ErrorType, WeakPointer, MemberPointer, MPCA>::get_pending() noexcept -> pending_type* {
  switch (value_.index()) {
    default:
      return nullptr;
    case 0:
      return &std::get<0>(value_);
  }
}

template<typename Pointer, typename Allocator, typename ErrorType, typename WeakPointer, typename MemberPointer, typename MPCA>
inline auto mapped_pointer<Pointer, Allocator, ErrorType, WeakPointer, MemberPointer, MPCA>::matches(function_ref<bool(const mapped_type&)> matcher) const -> bool {
  switch (value_.index()) {
    default:
      return false;
    case 1:
      return std::invoke(matcher, std::get<1>(value_));
    case 2:
      if (Pointer ptr = std::get<2>(value_).lock())
        return std::invoke(matcher, ptr);
      return false;
  }
}


} /* namespace libhoard::detail */
