#pragma once

#include <algorithm>
#include <condition_variable>
#include <mutex>
#include <thread>
#include <tuple>
#include <utility>

#include "thread_safe_policy.h"
#include "detail/linked_list.h"
#include "detail/meta.h"
#include "detail/refcount.h"

namespace libhoard::detail {
namespace {


template<typename ValueType>
class on_refresh_event_fn {
  public:
  on_refresh_event_fn(ValueType* new_value, const ValueType* old_value) noexcept
  : new_value(new_value),
    old_value(old_value)
  {}

  template<typename T>
  auto operator()([[maybe_unused]] T* nil) const -> decltype(std::declval<T*>()->on_refresh(std::declval<const ValueType*>())) {
    return new_value->T::on_refresh(old_value);
  }

  private:
  ValueType* new_value;
  const ValueType* old_value;
};


} /* namespace libhoard::detail::<unnamed> */
} /* namespace libhoard::detail */

namespace libhoard {


template<typename ValueType>
inline auto refresh_impl_policy::on_refresh_event(ValueType* new_value, const ValueType* old_value) {
  typename ValueType::base_types::template apply_t<detail::maybe_apply_for_each_type> functors;
  functors(detail::on_refresh_event_fn(new_value, old_value));
}


template<typename HashTable>
refresh_impl_policy::value_base::value_base([[maybe_unused]] const HashTable& table)
{}


template<typename HashTable, typename ValueType, typename Allocator>
template<typename... Args>
inline refresh_impl_policy::table_base<HashTable, ValueType, Allocator>::table_base([[maybe_unused]] const std::tuple<Args...>& args, [[maybe_unused]] const Allocator& allocator)
{}

template<typename HashTable, typename ValueType, typename Allocator>
inline auto refresh_impl_policy::table_base<HashTable, ValueType, Allocator>::refresh(ValueType* raw_value_ptr) -> void {
  if (raw_value_ptr->refresh_impl_policy::value_base::refresh_started_) return;

  // Acquire owning reference to value.
  auto value_ptr = detail::refcount_ptr<ValueType, Allocator>(static_cast<const HashTable*>(this)->get_allocator());
  value_ptr.reset(raw_value_ptr);

  auto opt_key = value_ptr->key();
  if (!opt_key) {
    // Expire the value so the resolver will perform a refresh the next time this value is looked up.
    value_ptr->mark_expired();
    return;
  }

  auto lookup_ptr = static_cast<HashTable*>(this)->resolve(value_ptr->hash(), std::move(*opt_key));
  value_ptr->refresh_impl_policy::value_base::refresh_started_ = true; // never throws
#if __cpp_exceptions
  try
#endif
  {
    if (typename ValueType::pending_type* pending = lookup_ptr->get_pending()) {
      pending->add_callback(
          [lookup_ptr=lookup_ptr.get(), value_ptr]([[maybe_unused]] const auto& value, [[maybe_unused]] const auto& ex) {
            on_refresh_event(lookup_ptr, value_ptr.get());
            value_ptr->mark_expired();
          });
    } else {
      on_refresh_event(lookup_ptr.get(), value_ptr.get());
      value_ptr->mark_expired();
    }
  }
#if __cpp_exceptions
  catch (...) {
    // If we failed to install the callback, we mark the old element expired immediately,
    // to ensure it can't linger after the resolve method completes.
    value_ptr->mark_expired();
    throw;
  }
#endif
}


template<typename Clock>
inline refresh_policy<Clock>::refresh_policy(typename Clock::duration delay, typename Clock::duration idle_timer)
: delay(std::move(delay)),
  idle_timer(std::move(idle_timer))
{}


template<typename Clock>
template<typename HashTable>
inline refresh_policy<Clock>::value_base::value_base([[maybe_unused]] const HashTable& table)
{}

template<typename Clock>
inline auto refresh_policy<Clock>::value_base::expired() const noexcept -> bool {
  return Clock::now() >= cancel_tp;
}

template<typename Clock>
inline auto refresh_policy<Clock>::value_base::on_refresh(const value_base* old_value) noexcept -> void {
  cancel_tp = std::min(cancel_tp, old_value->cancel_tp);
}


template<typename Clock>
template<typename HashTable, typename ValueType, typename Allocator>
template<typename... Args>
inline refresh_policy<Clock>::table_base<HashTable, ValueType, Allocator>::table_base(const std::tuple<Args...>& args, [[maybe_unused]] const Allocator& allocator)
: delay(std::get<refresh_policy>(args).delay),
  idle_timer(std::get<refresh_policy>(args).idle_timer)
{}

template<typename Clock>
template<typename HashTable, typename ValueType, typename Allocator>
inline auto refresh_policy<Clock>::table_base<HashTable, ValueType, Allocator>::on_assign_(ValueType* vptr, bool value, [[maybe_unused]] bool assigned_via_callback) noexcept -> void {
  if (value) {
    vptr->refresh_policy::value_base::refresh_tp = Clock::now() + delay;
    delay_queue.link_back(vptr);
    delay_queue_changed.notify_one();

    if (idle_timer != Clock::duration::zero()) {
      vptr->refresh_policy::value_base::cancel_tp = std::min(
          vptr->refresh_policy::value_base::cancel_tp,
          Clock::now() + idle_timer);
    }
  }
}

template<typename Clock>
template<typename HashTable, typename ValueType, typename Allocator>
inline auto refresh_policy<Clock>::table_base<HashTable, ValueType, Allocator>::on_hit_(ValueType* vptr) noexcept -> void {
  if (idle_timer != Clock::duration::zero() && vptr->holds_value())
    vptr->cancel_tp = Clock::now() + idle_timer;
}

template<typename Clock>
template<typename HashTable, typename ValueType, typename Allocator>
inline auto refresh_policy<Clock>::table_base<HashTable, ValueType, Allocator>::on_unlink_(ValueType* vptr) noexcept -> void {
  if (vptr->refresh_policy::value_base::is_linked()) delay_queue.unlink(delay_queue.iterator_to(vptr));
}

template<typename Clock>
template<typename HashTable, typename ValueType, typename Allocator>
inline auto refresh_policy<Clock>::table_base<HashTable, ValueType, Allocator>::init() -> void {
  worker = std::thread(&table_base::worker_task, this);
}

template<typename Clock>
template<typename HashTable, typename ValueType, typename Allocator>
inline auto refresh_policy<Clock>::table_base<HashTable, ValueType, Allocator>::destroy() -> void {
  {
    auto lck = std::lock_guard<HashTable>(*static_cast<HashTable*>(this));
    stop = true;
    delay_queue_changed.notify_all();
  }

  if (worker.joinable()) worker.join();
}

template<typename Clock>
template<typename HashTable, typename ValueType, typename Allocator>
inline auto refresh_policy<Clock>::table_base<HashTable, ValueType, Allocator>::worker_task() -> void {
  auto self = static_cast<HashTable*>(this);
  auto lck = std::unique_lock<HashTable>(*self);

  if (stop) return;
  for (;;) {
    if (delay_queue.empty())
      delay_queue_changed.wait(lck);
    else
      delay_queue_changed.wait_until(lck, delay_queue.begin()->refresh_tp);
    if (stop) return;

    const auto now = Clock::now();
    while (!delay_queue.empty() && now >= delay_queue.begin()->refresh_tp) {
      ValueType* vptr = delay_queue.begin().get();
      delay_queue.unlink(delay_queue.iterator_to(vptr));
      if (!vptr->expired())
        self->refresh(vptr); // XXX should we swallow exceptions?
    }
  }
}


} /* namespace libhoard */
