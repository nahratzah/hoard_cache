#pragma once

namespace libhoard {


inline max_size_policy::max_size_policy(std::size_t v) noexcept
: value(v)
{}


template<typename HashTable, typename ValueType, typename Allocator>
inline max_size_policy::table_base<HashTable, ValueType, Allocator>::table_base(const max_size_policy& p) noexcept
: max_size_(p.value)
{}

template<typename HashTable, typename ValueType, typename Allocator>
template<typename... Args>
inline max_size_policy::table_base<HashTable, ValueType, Allocator>::table_base(const std::tuple<Args...>& args, [[maybe_unused]] const Allocator& alloc) noexcept
: table_base(std::get<max_size_policy>(args))
{}

template<typename HashTable, typename ValueType, typename Allocator>
inline auto max_size_policy::table_base<HashTable, ValueType, Allocator>::policy_removal_check_() const noexcept -> std::size_t {
  auto& self = static_cast<const HashTable&>(*this);
  return self.size() > max_size_ ? self.size() - max_size_ : 0u;
}


} /* namespace libhoard */
