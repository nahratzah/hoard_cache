#pragma once

#include <algorithm>
#include <mutex>
#include <utility>

#include "detail/refcount.h"

namespace libhoard {


template<typename Clock>
inline refresh_policy<Clock>::refresh_policy(typename Clock::duration delay, typename Clock::duration idle_timer)
: delay(std::move(delay)),
  idle_timer(std::move(idle_timer))
{}


template<typename Clock>
template<typename HashTable>
inline refresh_policy<Clock>::value_base::value_base([[maybe_unused]] const HashTable& table)
{}

template<typename Clock>
inline auto refresh_policy<Clock>::value_base::expired() const noexcept -> bool {
  return Clock::now() >= cancel_tp;
}

template<typename Clock>
inline auto refresh_policy<Clock>::value_base::on_refresh(const value_base* old_value) noexcept -> void {
  cancel_tp = std::min(cancel_tp, old_value->cancel_tp);
}


template<typename Clock>
template<typename HashTable, typename ValueType, typename Allocator>
template<typename... Args>
inline refresh_policy<Clock>::table_base<HashTable, ValueType, Allocator>::table_base(const std::tuple<Args...>& args, [[maybe_unused]] const Allocator& allocator)
: delay(std::get<refresh_policy>(args).delay),
  idle_timer(std::get<refresh_policy>(args).idle_timer)
{}

template<typename Clock>
template<typename HashTable, typename ValueType, typename Allocator>
inline auto refresh_policy<Clock>::table_base<HashTable, ValueType, Allocator>::on_assign_(ValueType* vptr, bool value, [[maybe_unused]] bool assigned_via_callback) noexcept -> void {
  if (value) {
    vptr->refresh_policy::value_base::refresh_tp = Clock::now() + delay;
    delay_queue.link_back(vptr);
    delay_queue_changed.notify_one();

    if (idle_timer != Clock::duration::zero()) {
      vptr->refresh_policy::value_base::cancel_tp = std::min(
          vptr->refresh_policy::value_base::cancel_tp,
          Clock::now() + idle_timer);
    }
  }
}

template<typename Clock>
template<typename HashTable, typename ValueType, typename Allocator>
inline auto refresh_policy<Clock>::table_base<HashTable, ValueType, Allocator>::on_hit_(ValueType* vptr) noexcept -> void {
  if (idle_timer != Clock::duration::zero() && vptr->holds_value())
    vptr->cancel_tp = Clock::now() + idle_timer;
}

template<typename Clock>
template<typename HashTable, typename ValueType, typename Allocator>
inline auto refresh_policy<Clock>::table_base<HashTable, ValueType, Allocator>::on_unlink_(ValueType* vptr) noexcept -> void {
  if (vptr->refresh_policy::value_base::is_linked()) delay_queue.unlink(delay_queue.iterator_to(vptr));
}

template<typename Clock>
template<typename HashTable, typename ValueType, typename Allocator>
inline auto refresh_policy<Clock>::table_base<HashTable, ValueType, Allocator>::init() -> void {
  worker = std::thread(&table_base::worker_task, this);
}

template<typename Clock>
template<typename HashTable, typename ValueType, typename Allocator>
inline auto refresh_policy<Clock>::table_base<HashTable, ValueType, Allocator>::destroy() -> void {
  {
    auto lck = std::lock_guard<HashTable>(*static_cast<HashTable*>(this));
    stop = true;
    delay_queue_changed.notify_all();
  }

  if (worker.joinable()) worker.join();
}

template<typename Clock>
template<typename HashTable, typename ValueType, typename Allocator>
inline auto refresh_policy<Clock>::table_base<HashTable, ValueType, Allocator>::worker_task() -> void {
  auto self = static_cast<HashTable*>(this);
  auto lck = std::unique_lock<HashTable>(*self);

  if (stop) return;
  for (;;) {
    if (delay_queue.empty())
      delay_queue_changed.wait(lck);
    else
      delay_queue_changed.wait_until(lck, delay_queue.begin()->refresh_tp);
    if (stop) return;

    const auto now = Clock::now();
    while (!delay_queue.empty() && now >= delay_queue.begin()->refresh_tp) {
      ValueType* vptr = delay_queue.begin().get();
      delay_queue.unlink(delay_queue.iterator_to(vptr));
      self->refresh(vptr); // XXX should we swallow exceptions?
    }
  }
}


} /* namespace libhoard */
