#pragma once

namespace libhoard::detail {
namespace {


template<typename SelfType, typename ValueType>
class on_create_fn {
  public:
  on_create_fn(SelfType* self, ValueType* vptr) noexcept
  : self(self),
    vptr(vptr)
  {}

  template<typename T>
  auto operator()([[maybe_unused]] T* nil) const -> decltype(std::declval<T&>().on_create_(std::declval<ValueType*>())) {
    return self->T::on_create_(vptr);
  }

  private:
  SelfType* self;
  ValueType* vptr;
};

template<typename SelfType, typename ValueType>
class on_assign_fn {
  public:
  on_assign_fn(SelfType* self, ValueType* vptr, bool value, bool assigned_via_callback) noexcept
  : self(self),
    vptr(vptr),
    value(value),
    assigned_via_callback(assigned_via_callback)
  {}

  template<typename T>
  auto operator()([[maybe_unused]] T* nil) const -> decltype(std::declval<T&>().on_assign_(std::declval<ValueType*>(), std::declval<bool>(), std::declval<bool>())) {
    return self->T::on_assign_(vptr, value, assigned_via_callback);
  }

  private:
  SelfType* self;
  ValueType* vptr;
  bool value;
  bool assigned_via_callback;
};

template<typename SelfType, typename ValueType>
class on_unlink_fn {
  public:
  on_unlink_fn(SelfType* self, ValueType* vptr) noexcept
  : self(self),
    vptr(vptr)
  {}

  template<typename T>
  auto operator()([[maybe_unused]] T* nil) const -> decltype(std::declval<T&>().on_unlink_(std::declval<ValueType*>())) {
    return self->T::on_unlink_(vptr);
  }

  private:
  SelfType* self;
  ValueType* vptr;
};

template<typename SelfType, typename ValueType>
class on_hit_fn {
  public:
  on_hit_fn(SelfType* self, ValueType* vptr) noexcept
  : self(self),
    vptr(vptr)
  {}

  template<typename T>
  auto operator()([[maybe_unused]] T* nil) const -> decltype(std::declval<T&>().on_hit_(std::declval<ValueType*>())) {
    return self->T::on_hit_(vptr);
  }

  private:
  SelfType* self;
  ValueType* vptr;
};

template<typename SelfType>
class on_miss_fn {
  public:
  explicit on_miss_fn(SelfType* self) noexcept
  : self(self)
  {}

  template<typename T>
  auto operator()([[maybe_unused]] T* nil) const -> decltype(std::declval<T&>().on_miss_()) {
    return self->T::on_miss_();
  }

  private:
  SelfType* self;
};

template<typename SelfType>
class on_maintenance_fn {
  public:
  explicit on_maintenance_fn(SelfType* self) noexcept
  : self(self)
  {}

  template<typename T>
  auto operator()([[maybe_unused]] T* nil) const -> decltype(std::declval<T&>().on_maintenance_()) {
    return self->T::on_maintenance_();
  }

  private:
  SelfType* self;
};

template<typename SelfType>
class policy_removal_check_fn {
  public:
  policy_removal_check_fn(const SelfType* self, std::size_t* max) noexcept
  : self(self),
    max(max)
  {}

  template<typename T>
  auto operator()([[maybe_unused]] T* nil) const -> std::void_t<decltype(std::declval<T&>().policy_removal_check_())> {
    std::size_t local_count_to_remove = self->T::policy_removal_check_();
    if (local_count_to_remove > *max)
      *max = local_count_to_remove;
  }

  private:
  const SelfType* self;
  std::size_t* max;
};

template<typename SelfType>
class init_fn {
  public:
  explicit init_fn(SelfType* self) noexcept
  : self(self)
  {}

  template<typename T>
  auto operator()([[maybe_unused]] T* nil) const -> decltype(std::declval<T&>().init()) {
    return self->T::init();
  }

  private:
  SelfType* self;
};

template<typename SelfType>
class destroy_fn {
  public:
  explicit destroy_fn(SelfType* self) noexcept
  : self(self)
  {}

  template<typename T>
  auto operator()([[maybe_unused]] T* nil) const noexcept -> decltype(std::declval<T&>().destroy()) {
    return self->T::destroy();
  }

  private:
  SelfType* self;
};


} /* namespace libhoard::detail::<unnamed> */


template<typename T>
template<typename HashTable>
inline hashtable_dfl_constructible_<T>::hashtable_dfl_constructible_([[maybe_unused]] const HashTable& ht)
{}


template<typename ValueType, typename... PolicyMap>
template<typename... Args, typename Alloc>
inline hashtable_policy_container<ValueType, PolicyMap...>::hashtable_policy_container(const std::tuple<Args...>& args, const Alloc& alloc)
: PolicyMap::table_base(args, alloc)...
{}

template<typename ValueType, typename... PolicyMap>
inline hashtable_policy_container<ValueType, PolicyMap...>::~hashtable_policy_container() noexcept {
  this->destroy();
}

template<typename ValueType, typename... PolicyMap>
inline auto hashtable_policy_container<ValueType, PolicyMap...>::on_create_(ValueType* vptr) noexcept -> void {
  base_invoke_(on_create_fn<hashtable_policy_container, ValueType>(this, vptr));
}

template<typename ValueType, typename... PolicyMap>
inline auto hashtable_policy_container<ValueType, PolicyMap...>::on_assign_(ValueType* vptr, bool value, bool assigned_via_callback) noexcept -> void {
  base_invoke_(on_assign_fn<hashtable_policy_container, ValueType>(this, vptr, value, assigned_via_callback));
}

template<typename ValueType, typename... PolicyMap>
inline auto hashtable_policy_container<ValueType, PolicyMap...>::on_unlink_(ValueType* vptr) noexcept -> void {
  base_invoke_(on_unlink_fn<hashtable_policy_container, ValueType>(this, vptr));
}

template<typename ValueType, typename... PolicyMap>
inline auto hashtable_policy_container<ValueType, PolicyMap...>::on_hit_(ValueType* vptr) noexcept -> void {
  base_invoke_(on_hit_fn<hashtable_policy_container, ValueType>(this, vptr));
}

template<typename ValueType, typename... PolicyMap>
inline auto hashtable_policy_container<ValueType, PolicyMap...>::on_miss_() noexcept -> void {
  base_invoke_(on_miss_fn<hashtable_policy_container>(this));
}

template<typename ValueType, typename... PolicyMap>
inline auto hashtable_policy_container<ValueType, PolicyMap...>::on_maintenance_() noexcept -> void {
  base_invoke_(on_maintenance_fn<hashtable_policy_container>(this));
}

template<typename ValueType, typename... PolicyMap>
template<bool Enable>
inline auto hashtable_policy_container<ValueType, PolicyMap...>::policy_removal_check_() const noexcept -> std::enable_if_t<Enable, std::size_t> {
  std::size_t count_to_remove = 0;
  base_invoke_(policy_removal_check_fn<hashtable_policy_container>(this, &count_to_remove));
  return count_to_remove;
}

template<typename ValueType, typename... PolicyMap>
inline auto hashtable_policy_container<ValueType, PolicyMap...>::init() -> void {
#if __cpp_exceptions
  try
#endif
  {
    base_invoke_(init_fn<hashtable_policy_container>(this));
  }
#if __cpp_exceptions
  catch (...) {
    base_invoke_(destroy_fn<hashtable_policy_container>(this)); // Cleanup.
    throw;
  }
#endif
}

template<typename ValueType, typename... PolicyMap>
inline auto hashtable_policy_container<ValueType, PolicyMap...>::destroy() -> void {
  base_invoke_(destroy_fn<hashtable_policy_container>(this));
}

template<typename ValueType, typename... PolicyMap>
template<typename Fn>
inline auto hashtable_policy_container<ValueType, PolicyMap...>::base_invoke_(Fn&& fn) noexcept -> void {
  typename type_list<typename PolicyMap::table_base...>::template apply_t<maybe_apply_for_each_type> functors;
  functors(std::forward<Fn>(fn));
}


template<typename KeyType, typename T, typename... Policies>
inline hashtable_helper_<KeyType, T, Policies...>::iterator::iterator() noexcept = default;

template<typename KeyType, typename T, typename... Policies>
inline hashtable_helper_<KeyType, T, Policies...>::iterator::iterator(basic_hashtable_algorithms::iterator iter) noexcept
: iter_(std::move(iter))
{}

template<typename KeyType, typename T, typename... Policies>
inline auto hashtable_helper_<KeyType, T, Policies...>::iterator::operator++() noexcept -> iterator& {
  ++iter_;
  return *this;
}

template<typename KeyType, typename T, typename... Policies>
inline auto hashtable_helper_<KeyType, T, Policies...>::iterator::operator++(int) noexcept -> iterator {
  return iterator(iter_++);
}

template<typename KeyType, typename T, typename... Policies>
inline auto hashtable_helper_<KeyType, T, Policies...>::iterator::get() const noexcept -> value_type* {
  return static_cast<value_type*>(iter_.operator->());
}

template<typename KeyType, typename T, typename... Policies>
inline auto hashtable_helper_<KeyType, T, Policies...>::iterator::operator*() const noexcept -> value_type& {
  return static_cast<value_type&>(iter_.operator*());
}

template<typename KeyType, typename T, typename... Policies>
inline auto hashtable_helper_<KeyType, T, Policies...>::iterator::operator->() const noexcept -> value_type* {
  return static_cast<value_type*>(iter_.operator->());
}

template<typename KeyType, typename T, typename... Policies>
inline auto hashtable_helper_<KeyType, T, Policies...>::iterator::operator==(const iterator& y) const noexcept -> bool {
  return iter_ == y.iter_;
}

template<typename KeyType, typename T, typename... Policies>
inline auto hashtable_helper_<KeyType, T, Policies...>::iterator::operator!=(const iterator& y) const noexcept -> bool {
  return iter_ != y.iter_;
}

template<typename KeyType, typename T, typename... Policies>
inline auto hashtable_helper_<KeyType, T, Policies...>::iterator::operator==(const const_iterator& y) const noexcept -> bool {
  return iter_ == y.iter_;
}

template<typename KeyType, typename T, typename... Policies>
inline auto hashtable_helper_<KeyType, T, Policies...>::iterator::operator!=(const const_iterator& y) const noexcept -> bool {
  return iter_ != y.iter_;
}


template<typename KeyType, typename T, typename... Policies>
inline hashtable_helper_<KeyType, T, Policies...>::const_iterator::const_iterator() noexcept = default;

template<typename KeyType, typename T, typename... Policies>
inline hashtable_helper_<KeyType, T, Policies...>::const_iterator::const_iterator(const iterator& y) noexcept
: iter_(y.iter_)
{}

template<typename KeyType, typename T, typename... Policies>
inline hashtable_helper_<KeyType, T, Policies...>::const_iterator::const_iterator(basic_hashtable_algorithms::const_iterator iter) noexcept
: iter_(std::move(iter))
{}

template<typename KeyType, typename T, typename... Policies>
inline auto hashtable_helper_<KeyType, T, Policies...>::const_iterator::operator++() noexcept -> const_iterator& {
  ++iter_;
  return *this;
}

template<typename KeyType, typename T, typename... Policies>
inline auto hashtable_helper_<KeyType, T, Policies...>::const_iterator::operator++(int) noexcept -> const_iterator {
  return const_iterator(iter_++);
}

template<typename KeyType, typename T, typename... Policies>
inline auto hashtable_helper_<KeyType, T, Policies...>::const_iterator::get() const noexcept -> const value_type* {
  return static_cast<const value_type*>(iter_.operator->());
}

template<typename KeyType, typename T, typename... Policies>
inline auto hashtable_helper_<KeyType, T, Policies...>::const_iterator::operator*() const noexcept -> const value_type& {
  return static_cast<const value_type&>(iter_.operator*());
}

template<typename KeyType, typename T, typename... Policies>
inline auto hashtable_helper_<KeyType, T, Policies...>::const_iterator::operator->() const noexcept -> const value_type* {
  return static_cast<const value_type*>(iter_.operator->());
}

template<typename KeyType, typename T, typename... Policies>
inline auto hashtable_helper_<KeyType, T, Policies...>::const_iterator::operator==(const iterator& y) const noexcept -> bool {
  return iter_ == y.iter_;
}

template<typename KeyType, typename T, typename... Policies>
inline auto hashtable_helper_<KeyType, T, Policies...>::const_iterator::operator!=(const iterator& y) const noexcept -> bool {
  return iter_ != y.iter_;
}

template<typename KeyType, typename T, typename... Policies>
inline auto hashtable_helper_<KeyType, T, Policies...>::const_iterator::operator==(const const_iterator& y) const noexcept -> bool {
  return iter_ == y.iter_;
}

template<typename KeyType, typename T, typename... Policies>
inline auto hashtable_helper_<KeyType, T, Policies...>::const_iterator::operator!=(const const_iterator& y) const noexcept -> bool {
  return iter_ != y.iter_;
}


template<typename KeyType, typename T, typename... Policies>
inline hashtable_helper_<KeyType, T, Policies...>::range::range() noexcept = default;

template<typename KeyType, typename T, typename... Policies>
inline hashtable_helper_<KeyType, T, Policies...>::range::range(iterator b, iterator e) noexcept
: b(b), e(e)
{}

template<typename KeyType, typename T, typename... Policies>
inline auto hashtable_helper_<KeyType, T, Policies...>::range::begin() const noexcept -> iterator {
  return b;
}

template<typename KeyType, typename T, typename... Policies>
inline auto hashtable_helper_<KeyType, T, Policies...>::range::end() const noexcept -> iterator {
  return e;
}

template<typename KeyType, typename T, typename... Policies>
inline auto hashtable_helper_<KeyType, T, Policies...>::range::empty() const noexcept -> bool {
  return b == e;
}


template<typename KeyType, typename T, typename... Policies>
inline hashtable_helper_<KeyType, T, Policies...>::const_range::const_range() noexcept = default;

template<typename KeyType, typename T, typename... Policies>
inline hashtable_helper_<KeyType, T, Policies...>::const_range::const_range(const range& y) noexcept
: const_range(y.begin(), y.end())
{}

template<typename KeyType, typename T, typename... Policies>
inline hashtable_helper_<KeyType, T, Policies...>::const_range::const_range(iterator b, iterator e) noexcept
: b(b), e(e)
{}

template<typename KeyType, typename T, typename... Policies>
inline auto hashtable_helper_<KeyType, T, Policies...>::const_range::begin() const noexcept -> iterator {
  return b;
}

template<typename KeyType, typename T, typename... Policies>
inline auto hashtable_helper_<KeyType, T, Policies...>::const_range::end() const noexcept -> iterator {
  return e;
}

template<typename KeyType, typename T, typename... Policies>
inline auto hashtable_helper_<KeyType, T, Policies...>::const_range::empty() const noexcept -> bool {
  return b == e;
}


template<typename KeyType, typename T, typename... Policies>
template<typename... Args>
inline hashtable<KeyType, T, Policies...>::hashtable(const std::tuple<Args...>& args, allocator_type allocator)
: basic_hashtable_allocator_member<allocator_type>(allocator),
  bht(allocator),
  hashtable_helper_<KeyType, T, Policies...>::ht_base(args, allocator)
{
  this->init();
}

template<typename KeyType, typename T, typename... Policies>
template<typename... Args>
inline hashtable<KeyType, T, Policies...>::hashtable(const std::tuple<Args...>& args, float max_load_factor, allocator_type allocator)
: basic_hashtable_allocator_member<allocator_type>(allocator),
  bht(max_load_factor, allocator),
  hashtable_helper_<KeyType, T, Policies...>::ht_base(args, allocator)
{
  this->init();
}

template<typename KeyType, typename T, typename... Policies>
inline hashtable<KeyType, T, Policies...>::~hashtable() {
  this->clear_and_dispose(disposer_());
}

template<typename KeyType, typename T, typename... Policies>
inline auto hashtable<KeyType, T, Policies...>::reserve(size_type sz) -> void {
  this->bht::reserve(sz, [this]() { this->unlink_expired_elements_(); });
}

template<typename KeyType, typename T, typename... Policies>
inline auto hashtable<KeyType, T, Policies...>::get_if_exists_(std::size_t hash, function_ref<bool(const key_type&)> matcher) const -> std::variant<std::monostate, mapped_type, error_type> {
  for (const auto& elem : bucket_for_hash_(hash)) {
    if (elem.hash() != hash) continue;
    auto result = elem.get_if_matching(matcher, std::false_type());
    if (result.index() != 0 && !elem.expired())
      return result;
  }
  return {};
}

template<typename KeyType, typename T, typename... Policies>
template<typename... Keys>
inline auto hashtable<KeyType, T, Policies...>::get_if_exists(const Keys&... keys) const noexcept(
    noexcept(std::invoke(std::declval<const typename helper_type::ht_base&>().equal, std::declval<const key_type&>(), std::declval<const Keys&>()...))
    &&
    noexcept(std::invoke(std::declval<const typename helper_type::ht_base&>().hash, std::declval<const Keys&>()...))
    &&
    std::is_nothrow_copy_constructible_v<mapped_type> && std::is_nothrow_copy_constructible_v<error_type>)
-> std::variant<std::monostate, mapped_type, error_type> {
  return get_if_exists_(
      std::invoke(this->hash, keys...),
      [&](const key_type& ht_key) -> bool {
        return std::invoke(this->equal, ht_key, keys...);
      });
}

template<typename KeyType, typename T, typename... Policies>
template<bool IncludePending>
inline auto hashtable<KeyType, T, Policies...>::get_(std::size_t hash, function_ref<bool(const key_type&)> matcher, std::integral_constant<bool, IncludePending> include_pending)
-> std::conditional_t<
    IncludePending,
    std::variant<std::monostate, mapped_type, error_type, pending_type*>,
    std::variant<std::monostate, mapped_type, error_type>> {
  const auto bucket_idx = this->bucket_for(hash);
  auto before_i = typename helper_type::iterator(this->bht::before_begin(bucket_idx)),
       before_e = typename helper_type::iterator(this->bht::before_end(bucket_idx));
  while (before_i != before_e) {
    const auto iter = std::next(before_i);
    if (iter->hash() != hash) { // If hashcode mismatches, we only need to maybe clean up if it's expired.
      if (iter->expired() && !iter->pending()) {
        if (iter == before_e) before_e = before_i;
        this->unlink_and_dispose(before_i.iter_, disposer_());
        continue;
      }
    } else {
      // Note: we must read the value before checking `expired`.
      // This is because the expired state can change concurrently,
      // and this way, we ensure we only have the value acquired
      // if it really was not-expired.
      auto val = iter->get_if_matching(matcher, include_pending);
      if (iter->expired()) {
        if (iter->pending()) {
          // Pending items are never removed.
          // This is because the destructor of the cache needs to
          // cancel any outstanding requests.
          before_i = iter;
        } else {
          // Cleanup expired element.
          if (iter == before_e) before_e = before_i;
          this->unlink_and_dispose(before_i.iter_, disposer_());
        }
        continue;
      }

      // Return value if it was found.
      if (val.index() != 0) {
        this->on_hit_(iter.get());
        return val;
      }
    }

    // No match and no expiry. Advance to next element.
    before_i = iter;
  }

  this->on_miss_();
  return {};
}

template<typename KeyType, typename T, typename... Policies>
template<typename... Keys>
inline auto hashtable<KeyType, T, Policies...>::get(const Keys&... keys) noexcept(
    noexcept(std::invoke(std::declval<const typename helper_type::ht_base&>().equal, std::declval<const key_type&>(), std::declval<const Keys&>()...))
    &&
    noexcept(std::invoke(std::declval<const typename helper_type::ht_base&>().hash, std::declval<const Keys&>()...))
    &&
    std::is_nothrow_copy_constructible_v<mapped_type> && std::is_nothrow_copy_constructible_v<error_type>)
-> std::variant<std::monostate, mapped_type, error_type> {
  static_assert(!helper_type::has_async_resolver_policy, "can't use synchronous 'get' method with asynchronous resolver");

  const std::size_t hash = std::invoke(this->hash, keys...);
  auto get_result = get_(
      hash,
      [&](const key_type& ht_key) -> bool {
        return std::invoke(this->equal, ht_key, keys...);
      },
      std::false_type());

  if constexpr(helper_type::has_resolver_policy) { // We have a resolver...
    if (get_result.index() == 0) { // ... and we don't have a value...
      // ... so we'll use the resolver to create a new value on the spot.
      const value_pointer new_value = this->resolve(hash, keys...);
      get_result = new_value->get(std::false_type());
    }
  }

  return get_result;
}

template<typename KeyType, typename T, typename... Policies>
template<typename CompletionCallback, typename... Keys>
inline auto hashtable<KeyType, T, Policies...>::async_get(CompletionCallback&& callback, const Keys&... keys) -> void {
  value_pointer new_value_ptr;
  const std::size_t hash = std::invoke(this->hash, keys...);
  auto get_result = get_(
      hash,
      [&](const key_type& ht_key) -> bool {
        return std::invoke(this->equal, ht_key, keys...);
      },
      std::true_type());

  // Invoke the resolver if value wasn't found.
  if constexpr(helper_type::has_async_resolver_policy || helper_type::has_resolver_policy) {
    if (get_result.index() == 0) {
      new_value_ptr = this->resolve(hash, keys...);
      get_result = new_value_ptr->get(std::true_type());
    }
  }

  switch (get_result.index()) {
    case 0: // Not found.
      break;
    case 1: // Holds a value.
      std::invoke(std::forward<CompletionCallback>(callback), std::get<1>(std::move(get_result)), error_type(), std::true_type());
      break;
    case 2: // Holds an error.
      std::invoke(std::forward<CompletionCallback>(callback), mapped_type(), std::get<2>(std::move(get_result)), std::true_type());
      break;
    case 3: // Lookup pending.
      if constexpr(std::is_copy_constructible_v<std::decay_t<CompletionCallback>>) {
        std::get<3>(get_result)->add_callback(
            [callback=std::forward<CompletionCallback>(callback)](const mapped_type& mapped_value, const error_type& error_value) mutable {
              std::invoke(std::forward<CompletionCallback>(callback), mapped_value, error_value, std::false_type());
            });
      } else {
        // We would prefer to use std::move_only_function, but that's not available until C++23.
        // So in order to make the non-copyable callback copyable, we wrap it inside a shared pointer instead.
        std::get<3>(get_result)->add_callback(
            [callback=std::allocate_shared<std::decay_t<CompletionCallback>>(this->get_allocator(), std::forward<CompletionCallback>(callback))](const mapped_type& mapped_value, const error_type& error_value) {
              std::invoke(std::forward<CompletionCallback>(*callback), mapped_value, error_value, std::false_type());
            });
      }
      break;
  }
}

template<typename KeyType, typename T, typename... Policies>
inline auto hashtable<KeyType, T, Policies...>::expire_all() noexcept -> void {
  auto before_iter = typename helper_type::iterator(this->bht::before_begin()),
       before_end = typename helper_type::iterator(this->bht::before_end());
  while (before_iter != before_end) {
    auto iter = std::next(before_iter);
    if (iter->pending()) {
      iter->mark_expired();
      before_iter = iter;
    } else {
      if (before_end == iter) before_end = before_iter;
      this->unlink_and_dispose(before_iter.iter_, disposer_());
    }
  }
}

template<typename KeyType, typename T, typename... Policies>
inline auto hashtable<KeyType, T, Policies...>::expire_(std::size_t hash, function_ref<bool(const key_type&)> matcher) -> void {
  const auto bucket_idx = this->bucket_for(hash);
  auto before_i = typename helper_type::iterator(this->bht::before_begin(bucket_idx)),
       before_e = typename helper_type::iterator(this->bht::before_end(bucket_idx));
  while (before_i != before_e) {
    const auto iter = std::next(before_i);
    if (iter->hash() == hash && iter->matches(matcher)) {
      if (iter->pending()) {
        iter->mark_expired();
      } else {
        // Expire by just dropping it from the cache entirely.
        if (iter == before_e) before_e = before_i;
        this->unlink_and_dispose(before_i.iter_, disposer_());
        continue;
      }
    } else {
      // Clean up any expired items we pass by in our search.
      if (iter->expired() && !iter->pending()) {
        if (iter == before_e) before_e = before_i;
        this->unlink_and_dispose(before_i.iter_, disposer_());
        continue;
      }
    }

    // No unlinking. Advance to next element.
    before_i = iter;
  }
}

template<typename KeyType, typename T, typename... Policies>
template<typename... Keys>
inline auto hashtable<KeyType, T, Policies...>::expire(const Keys&... keys) -> void {
  expire_(
      std::invoke(this->hash, keys...),
      [&](const key_type& ht_key) -> bool {
        return std::invoke(this->equal, ht_key, keys...);
      });
}

template<typename KeyType, typename T, typename... Policies>
template<typename... Args>
inline auto hashtable<KeyType, T, Policies...>::allocate_value_type(Args&&... args) -> value_pointer {
  return allocate_refcount<value_type>(this->basic_hashtable_allocator_member<allocator_type>::alloc, *this, std::forward<Args>(args)...);
}

template<typename KeyType, typename T, typename... Policies>
inline auto hashtable<KeyType, T, Policies...>::value_to_refpointer(value_type* vptr) const -> value_pointer {
  auto value_ptr = value_pointer(get_allocator());
  value_ptr.reset(vptr);
  return value_ptr;
}

template<typename KeyType, typename T, typename... Policies>
inline auto hashtable<KeyType, T, Policies...>::link(std::size_t hash, value_pointer vptr) -> void {
  this->bht::link(hash, vptr.get(), [this]() { this->unlink_expired_elements_(); }); // may throw
  this->on_create_(vptr.get()); // never throws
  if (!vptr->pending()) this->on_assign_(vptr.get(), vptr->holds_value(), false); // never throws
  vptr.release(); // never throws
}

template<typename KeyType, typename T, typename... Policies>
inline auto hashtable<KeyType, T, Policies...>::assign_value_callback(const value_pointer& vptr) -> callback_fn {
  return [weakself=this->weak_from_this(), vptr=vptr.get()]([[maybe_unused]] const mapped_type& v, const error_type& ex) {
    const std::shared_ptr<hashtable> self = weakself.lock();
    if (self)
#if __has_cpp_attribute(likely)
      [[likely]]
#endif
    {
      const bool holds_value = !ex; // Do this before the lock, just in case it throws an exception.
      self->lock();
      self->on_assign_(vptr, holds_value, true);
      self->unlock();
    }
  };
}

template<typename KeyType, typename T, typename... Policies>
inline auto hashtable<KeyType, T, Policies...>::begin() noexcept -> iterator {
  return iterator(this->bht::begin());
}

template<typename KeyType, typename T, typename... Policies>
inline auto hashtable<KeyType, T, Policies...>::end() noexcept -> iterator {
  return iterator(this->bht::end());
}

template<typename KeyType, typename T, typename... Policies>
inline auto hashtable<KeyType, T, Policies...>::begin() const noexcept -> const_iterator {
  return const_iterator(this->bht::begin());
}

template<typename KeyType, typename T, typename... Policies>
inline auto hashtable<KeyType, T, Policies...>::end() const noexcept -> const_iterator {
  return const_iterator(this->bht::end());
}

template<typename KeyType, typename T, typename... Policies>
inline auto hashtable<KeyType, T, Policies...>::cbegin() const noexcept -> const_iterator {
  return const_iterator(this->bht::cbegin());
}

template<typename KeyType, typename T, typename... Policies>
inline auto hashtable<KeyType, T, Policies...>::cend() const noexcept -> const_iterator {
  return const_iterator(this->bht::cend());
}

template<typename KeyType, typename T, typename... Policies>
template<typename... KeyArgs, typename... MappedArgs>
inline auto hashtable<KeyType, T, Policies...>::emplace(std::piecewise_construct_t pc, std::tuple<KeyArgs...> key_args, std::tuple<MappedArgs...> mapped_args) -> void {
  const auto hash = std::apply(this->hash, key_args);
  expire_(
      hash,
      [this, &key_args](const key_type& ht_key) -> bool {
        return std::apply(
            [this, &ht_key](const auto&... keys) {
              return std::invoke(this->equal, ht_key, keys...);
            },
            key_args);
      });
  link(hash, allocate_value_type(pc, std::move(key_args), std::move(mapped_args)));

  maintenance_();
}

template<typename KeyType, typename T, typename... Policies>
template<typename KeyArg, typename MappedArg>
inline auto hashtable<KeyType, T, Policies...>::emplace(KeyArg&& key_arg, MappedArg&& mapped_arg)
-> std::enable_if_t<std::is_constructible_v<key_type, KeyArg> && std::is_constructible_v<mapped_type, MappedArg>> {
  const auto hash = std::invoke(this->hash, key_arg);
  expire(key_arg);
  link(hash, allocate_value_type(std::piecewise_construct, std::forward_as_tuple(std::forward<KeyArg>(key_arg)), std::forward_as_tuple(std::forward<MappedArg>(mapped_arg))));

  maintenance_();
}

template<typename KeyType, typename T, typename... Policies>
template<typename... KeyArgs, typename... MappedArgs, bool IncludePending>
inline auto hashtable<KeyType, T, Policies...>::get_or_emplace(std::piecewise_construct_t pc, std::tuple<KeyArgs...> key_args, std::tuple<MappedArgs...> mapped_args, std::integral_constant<bool, IncludePending> include_pending)
-> std::conditional_t<
    IncludePending,
    std::variant<std::monostate, mapped_type, error_type, pending_type*>,
    std::variant<std::monostate, mapped_type, error_type>> {
  using result_type = std::conditional_t<
      IncludePending,
      std::variant<std::monostate, mapped_type, error_type, pending_type*>,
      std::variant<std::monostate, mapped_type, error_type>>;

  const auto hash = std::apply(this->hash, key_args);
  auto get_result = get_(
      hash,
      [this, &key_args](const key_type& ht_key) -> bool {
        return std::apply(
            [this, &ht_key](const auto&... keys) {
              return std::invoke(this->equal, ht_key, keys...);
            },
            key_args);
      },
      std::true_type());

  // If we found a value, return it.
  if (get_result.index() != 0) {
    maintenance_();
    if constexpr(include_pending()) {
      return get_result;
    } else {
      switch (get_result.index()) {
        default:
          return result_type(std::in_place_index<0>);
        case 1:
          return result_type(std::in_place_index<1>, std::get<1>(std::move(get_result)));
        case 2:
          return result_type(std::in_place_index<2>, std::get<2>(std::move(get_result)));
      }
    }
  }

  // Create a new value.
  auto new_value = allocate_value_type(pc, std::move(key_args), std::move(mapped_args));
  auto result = new_value->get(include_pending);
  link(hash, new_value);
  maintenance_();
  return result;
}

template<typename KeyType, typename T, typename... Policies>
template<typename KeyArg, typename MappedArg, bool IncludePending>
inline auto hashtable<KeyType, T, Policies...>::get_or_emplace(KeyArg&& key_arg, MappedArg&& mapped_arg, std::integral_constant<bool, IncludePending> include_pending)
-> std::enable_if_t<std::is_constructible_v<key_type, KeyArg> && std::is_constructible_v<mapped_type, MappedArg>,
    std::conditional_t<
        IncludePending,
        std::variant<std::monostate, mapped_type, error_type, pending_type*>,
        std::variant<std::monostate, mapped_type, error_type>>> {
  using result_type = std::conditional_t<
      IncludePending,
      std::variant<std::monostate, mapped_type, error_type, pending_type*>,
      std::variant<std::monostate, mapped_type, error_type>>;

  const auto hash = std::invoke(this->hash, key_arg);
  auto get_result = get_(
      hash,
      [this, &key_arg](const key_type& ht_key) -> bool {
        return std::invoke(this->equal, ht_key, key_arg);
      },
      std::true_type());

  // If we found a value, return it.
  if (get_result.index() != 0) {
    maintenance_();
    if constexpr(include_pending()) {
      return get_result;
    } else {
      switch (get_result.index()) {
        default:
          return result_type(std::in_place_index<0>);
        case 1:
          return result_type(std::in_place_index<1>, std::get<1>(std::move(get_result)));
        case 2:
          return result_type(std::in_place_index<2>, std::get<2>(std::move(get_result)));
      }
    }
  }

  // Create a new value.
  auto new_value = allocate_value_type(std::piecewise_construct, std::forward_as_tuple(std::forward<KeyArg>(key_arg)), std::forward_as_tuple(std::forward<MappedArg>(mapped_arg)));
  auto result = new_value->get(include_pending);
  link(hash, new_value);
  maintenance_();
  return result;
}

template<typename KeyType, typename T, typename... Policies>
inline auto hashtable<KeyType, T, Policies...>::count() const noexcept -> size_type {
  return std::count_if(begin(), end(), [](const value_type& v) { return !v.expired(); });
}

template<typename KeyType, typename T, typename... Policies>
inline auto hashtable<KeyType, T, Policies...>::maintenance_() noexcept -> void {
  if constexpr(helper_type::ht_base::has_policy_removal_check)
    this->lru_expire_(this->helper_type::ht_base::policy_removal_check_());

  // Allow policies each to do any other maintenance.
  this->helper_type::ht_base::on_maintenance_();
}

template<typename KeyType, typename T, typename... Policies>
inline auto hashtable<KeyType, T, Policies...>::bucket_for_hash_(std::size_t hash) noexcept -> typename helper_type::range {
  const auto bucket_idx = this->bucket_for(hash);
  return typename helper_type::range(this->bht::begin(bucket_idx), this->bht::end(bucket_idx));
}

template<typename KeyType, typename T, typename... Policies>
inline auto hashtable<KeyType, T, Policies...>::bucket_for_hash_(std::size_t hash) const noexcept -> typename helper_type::const_range {
  const auto bucket_idx = this->bucket_for(hash);
  return typename helper_type::const_range(typename helper_type::const_iterator(this->bht::begin(bucket_idx)), typename helper_type::const_iterator(this->bht::end(bucket_idx)));
}

template<typename KeyType, typename T, typename... Policies>
inline auto hashtable<KeyType, T, Policies...>::unlink_expired_elements_() -> void {
  auto before_i = typename helper_type::iterator(this->bht::before_begin()),
       before_e = typename helper_type::iterator(this->bht::before_end());
  while (before_i != before_e) {
    const auto iter = std::next(before_i);
    if (iter->expired() && !iter->pending()) {
      if (before_e == iter) before_e = before_i;
      this->unlink_and_dispose(before_i.iter_, disposer_());
    } else {
      before_i = iter;
    }
  }
}

template<typename KeyType, typename T, typename... Policies>
inline auto hashtable<KeyType, T, Policies...>::disposer_() noexcept -> disposer_impl {
  return disposer_impl(*this);
}


template<typename KeyType, typename T, typename... Policies>
inline hashtable<KeyType, T, Policies...>::disposer_impl::disposer_impl(hashtable& self) noexcept
: self(self)
{}

template<typename KeyType, typename T, typename... Policies>
inline auto hashtable<KeyType, T, Policies...>::disposer_impl::operator()(basic_hashtable_element* base_elem) noexcept -> void {
  value_type* elem = static_cast<value_type*>(base_elem);
  elem->cancel(); // never throws
  self.on_unlink_(elem); // never throws
  if (refcount_dec(elem)) {
    std::allocator_traits<allocator_type>::destroy(self.basic_hashtable_allocator_member<allocator_type>::alloc, elem);
    std::allocator_traits<allocator_type>::deallocate(self.basic_hashtable_allocator_member<allocator_type>::alloc, elem, 1);
  }
}


} /* namespace libhoard::detail */
