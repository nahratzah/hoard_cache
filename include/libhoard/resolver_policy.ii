#pragma once

#include <functional>
#include <mutex>
#include <utility>

namespace libhoard {


template<typename Functor>
inline resolver_policy<Functor>::resolver_policy() = default;

template<typename Functor>
inline resolver_policy<Functor>::resolver_policy(Functor resolver)
: resolver_(std::move(resolver))
{}


template<typename Functor>
template<typename HashTable, typename ValueType, typename Allocator>
inline resolver_policy<Functor>::table_base<HashTable, ValueType, Allocator>::table_base(const resolver_policy& policy, [[maybe_unused]] const Allocator& alloc)
: resolver_(policy.resolver_)
{}

template<typename Functor>
template<typename HashTable, typename ValueType, typename Allocator>
inline resolver_policy<Functor>::table_base<HashTable, ValueType, Allocator>::table_base(resolver_policy&& policy, [[maybe_unused]] const Allocator& alloc)
: resolver_(std::move(policy.resolver_))
{}

template<typename Functor>
template<typename HashTable, typename ValueType, typename Allocator>
template<typename... Keys>
inline auto resolver_policy<Functor>::table_base<HashTable, ValueType, Allocator>::resolve(std::size_t hash, const Keys&... keys) -> detail::refcount_ptr<ValueType, Allocator> {
  auto self = static_cast<HashTable*>(this);
  detail::refcount_ptr<ValueType, Allocator> new_value;
  if constexpr(noexcept(std::invoke(resolver_, keys...))) {
    new_value = self->allocate_value_type(std::piecewise_construct, std::forward_as_tuple(keys...), std::invoke(resolver_, keys...));
  } else {
    new_value = self->allocate_value_type(std::piecewise_construct, std::forward_as_tuple(keys...));
    try {
      std::apply(
          [&new_value](auto&&... constructor_args_tuple) {
            new_value->assign(std::forward<decltype(constructor_args_tuple)>(constructor_args_tuple)...);
          },
          std::invoke(resolver_, keys...));
    } catch (...) {
      new_value->assign_error(std::current_exception());
    }
  }
  self->link(hash, new_value);
  return new_value;
}


template<typename Functor>
inline async_resolver_policy<Functor>::async_resolver_policy(Functor resolver)
: resolver_(std::move(resolver))
{}

template<typename Functor>
template<typename HashTable, typename ValuePointer>
inline auto async_resolver_policy<Functor>::on_assign_(HashTable& hashtable, ValuePointer value_pointer, bool value, bool assigned_via_callback) noexcept -> void {
  hashtable.on_assign_(value_pointer, value, assigned_via_callback);
}


template<typename Functor>
template<typename HashTable, typename ValueType, typename Allocator>
inline async_resolver_policy<Functor>::table_base<HashTable, ValueType, Allocator>::table_base(const async_resolver_policy& policy, [[maybe_unused]] const Allocator& alloc)
: resolver_(policy.resolver_)
{}

template<typename Functor>
template<typename HashTable, typename ValueType, typename Allocator>
inline async_resolver_policy<Functor>::table_base<HashTable, ValueType, Allocator>::table_base(async_resolver_policy&& policy, [[maybe_unused]] const Allocator& alloc)
: resolver_(std::move(policy.resolver_))
{}

template<typename Functor>
template<typename HashTable, typename ValueType, typename Allocator>
template<typename... Keys>
inline auto async_resolver_policy<Functor>::table_base<HashTable, ValueType, Allocator>::resolve(std::size_t hash, const Keys&... keys) -> detail::refcount_ptr<ValueType, Allocator> {
  using callback_allocator_type = typename std::allocator_traits<Allocator>::template rebind_alloc<callback>;

  auto self = static_cast<HashTable*>(this);
  auto new_value = self->allocate_value_type(std::piecewise_construct, std::forward_as_tuple(keys...));

  const std::shared_ptr<callback> callback_ptr = std::allocate_shared<callback>(callback_allocator_type(self->get_allocator()), self->shared_from_this(), new_value);
  self->link(hash, new_value);
  resolver_(callback_ptr, keys...);
  return new_value;
}


} /* namespace libhoard */

namespace libhoard::detail {


template<typename Functor, typename Impl, typename HashTableType>
template<typename... Keys>
inline auto cache_base<resolver_policy<Functor>, Impl, HashTableType>::get(const Keys&... keys)
-> typename HashTableType::mapped_type {
  Impl*const self = static_cast<Impl*>(this);
  std::lock_guard<HashTableType> lck{ *self->impl_ };

  auto v = self->impl_->get(keys...);
  switch (v.index()) {
    default:
      throw std::logic_error("cache bug: monostate result");
    case 1:
      break;
    case 2:
      std::rethrow_exception(std::get<2>(v));
      break;
  }
  auto v_value = std::get<1>(std::move(v));
  return v_value;
}


template<typename Functor, typename Impl, typename HashTableType>
template<typename... Keys>
inline auto cache_base<async_resolver_policy<Functor>, Impl, HashTableType>::get(const Keys&... keys)
-> std::future<std::variant<typename HashTableType::mapped_type, typename HashTableType::error_type>> {
  using variant_type = std::variant<typename HashTableType::mapped_type, typename HashTableType::error_type>;
  using promise_type = std::promise<variant_type>;
  using future_type = std::future<variant_type>;

  Impl*const self = static_cast<Impl*>(this);
  std::lock_guard<HashTableType> lck{ *self->impl_ };

  promise_type prom = promise_type(std::allocator_arg, self->impl_->get_allocator());
  future_type fut = prom.get_future();

  self->impl_->async_get(
      [ prom=std::move(prom)
      ](const typename HashTableType::mapped_type& value, const typename HashTableType::error_type& err, [[maybe_unused]] auto is_immediately_resolved) mutable {
        if (err)
          prom.set_value(variant_type(std::in_place_index<1>, err));
        else
          prom.set_value(variant_type(std::in_place_index<0>, value));
      },
      keys...);

  return fut;
}


} /* namespace libhoard::detail */
